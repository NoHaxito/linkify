// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         String    @id
  github_id  Int       @unique
  avatar_url String
  email      String
  username   String
  sessions   Session[]
  links      Link[]
}

model Link {
  id               String               @id
  slug             String               @unique
  url              String
  expires_at       DateTime?
  created_at       DateTime             @default(now())
  user             User?                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          String?
  settings         LinkSettings?
  analytics        LinkAnalytics?
  analytics_visits LinkAnalyticsVisit[]
}

model LinkAnalytics {
  link_id String               @id
  visits  LinkAnalyticsVisit[]
  link    Link                 @relation(fields: [link_id], references: [id], onDelete: Cascade)
}

model LinkAnalyticsVisit {
  id           Int           @id @unique @default(autoincrement())
  country      String
  visited_at   DateTime      @default(now())
  analytics_id LinkAnalytics @relation(fields: [link_id], references: [link_id], onDelete: Cascade)
  link         Link?         @relation(fields: [link_id], references: [id], onDelete: Cascade)
  link_id      String
}

model LinkSettings {
  link_id              String   @id @unique
  allowUnauthenticated Boolean
  password             String?
  custom_metadata      Boolean?
  link                 Link     @relation(fields: [link_id], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}
